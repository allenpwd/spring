<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--
        ENVIRONMENT：将使用Spring 3.1提供的PropertySourcesPlaceholderConfigurer，其他情况使用Spring 3.1之前的PropertyPlaceholderConfigurer
        OVERRIDE： PropertyPlaceholderConfigurer使用，因为在spring 3.1之前版本是没有Enviroment的，所以OVERRIDE是spring 3.1之前版本的Environment
        NEVER：只查找properties-ref、location
    -->
    <context:property-placeholder location="classpath:db.properties" system-properties-mode="ENVIRONMENT"/>

    <!--bean工厂方式创建实例-->
    <bean id="myFactoryBeanFromXML" class="pwd.allen.factoryBean.MyFactoryBean">
    </bean>

    <bean id="fruit" class="pwd.allen.entity.Fruit" p:name="from xml:${user.dir} #{12+34}" primary="true" scope="prototype">
        <property name="price" value="40"/>
    </bean>

    <!--ImportBeanDefinitionRegistrar通过xml注入的话它的registerBeanDefinitions方法不会被回调-->
    <bean id="myImportBeanDefinitionRegistrar" class="pwd.allen.importBeanDefinitionRegistrar.MyImportBeanDefinitionRegistrar"></bean>

    <!--getFruit使用动态获取bean的方式，
        methodReplacer替换myMethod方法（不推荐使用，返回结果类型要一致）
    -->
    <!--<bean id="replacer" class="pwd.MyMethodReplacer"/>-->
    <!--<bean class="pwd.LookUpService">-->
        <!--<lookup-method name="getFruit" bean="fruit"/>-->
        <!--<replaced-method name="myMethod" replacer="replacer"/>-->
    <!--</bean>-->

    <!--xml配置的方式配置aspect aop-->
    <bean id="myAspect4XML" class="pwd.allen.aop.MyAspect4XML"/>
    <aop:config>
        <aop:pointcut id="myPointCut" expression="execution(public void pwd.allen.service.My*.*Two(..))"/>
        <aop:pointcut id="myAnnocationPointCut" expression="@annotation(pwd.allen.annotation.MyAnnotation)"/>
        <!--order：定义优先级,值越小优先级越大-->
        <aop:aspect id="aspect" ref="myAspect4XML" order="0">
            <aop:before method="before"  pointcut-ref="myPointCut"/>
            <aop:before method="before"  pointcut-ref="myAnnocationPointCut"/>
            <aop:after method="after"  pointcut-ref="myPointCut"/>
            <aop:around method="around"  pointcut-ref="myPointCut"/>
            <aop:after-returning method="afterReturning" returning="result" pointcut-ref="myPointCut"/>
            <aop:after-throwing method="afterThrowing" throwing="e" pointcut-ref="myPointCut"/>
        </aop:aspect>
    </aop:config>

</beans>